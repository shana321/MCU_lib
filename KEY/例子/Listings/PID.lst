C51 COMPILER V9.54   PID                                                                   02/26/2018 14:59:50 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\Objects\PID.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE PID.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\PID.l
                    -st) TABS(2) OBJECT(.\Objects\PID.obj)

line level    source

   1          #include "PID.h"
   2          
   3          void new_PID(PID_Class *mpid,PID_type* Input,PID_type* Output,PID_type* Setpoint,PID_type Kp,PID_type Ki,P
             -ID_type Kd,bool POn, bool ControllerDirection)
   4          {
   5   1          mpid->myOutput = Output;
   6   1          mpid->myInput = Input;
   7   1          mpid->mySetpoint = Setpoint;
   8   1          mpid->inAuto = false;
   9   1      
  10   1          PID_SetOutputLimits(mpid,0,255);        //default output limit corresponds to
  11   1                              //the arduino pwm limits
  12   1      
  13   1          mpid->SampleTime = 100;             //default Controller Sample Time is 0.1 seconds
  14   1      
  15   1          PID_SetControllerDirection(mpid,ControllerDirection);
  16   1          PID_SetTunings(mpid,Kp, Ki, Kd, POn);
  17   1      
  18   1          mpid->lastTime = PIDmillis()-(mpid->SampleTime);
  19   1      }
  20          
  21          void PID_SetTunings(PID_Class *mpid,PID_type Kp, PID_type Ki, PID_type Kd, bool POn)
  22          {
  23   1          PID_type SampleTimeInSec = 0;
  24   1         if (Kp<0 || Ki<0 || Kd<0) return;
  25   1      
  26   1         //mpid->pOn = POn;
  27   1         mpid->pOnE = POn;
  28   1      
  29   1         mpid->dispKp = Kp; mpid->dispKi = Ki; mpid->dispKd = Kd;
  30   1      
  31   1         SampleTimeInSec = ((PID_type)mpid->SampleTime)/1000;
  32   1         mpid->kp = Kp;
  33   1         mpid->ki = Ki * SampleTimeInSec;
  34   1         mpid->kd = Kd / SampleTimeInSec;
  35   1      
  36   1        if(mpid->controllerDirection ==REVERSE)
  37   1         {
  38   2            mpid->kp = (0 - mpid->kp);
  39   2            mpid->ki = (0 - mpid->kp);
  40   2            mpid->kd = (0 - mpid->kp);
  41   2         }
  42   1      }
  43          void PID_SetSampleTime(PID_Class *mpid,Timetick NewSampleTime)
  44          {
  45   1         if (NewSampleTime > 0)
  46   1         {
  47   2            PID_type ratio  = (PID_type)NewSampleTime
  48   2                            / (PID_type)mpid->SampleTime;
  49   2            mpid->ki *= ratio;
  50   2            mpid->kd /= ratio;
  51   2            mpid->SampleTime = (Timetick)NewSampleTime;
  52   2         }
  53   1      }
C51 COMPILER V9.54   PID                                                                   02/26/2018 14:59:50 PAGE 2   

  54          void PID_SetOutputLimits(PID_Class *mpid,PID_type Min, PID_type Max)
  55          {
  56   1         if(Min >= Max) return;
  57   1         mpid->outMin = Min;
  58   1         mpid->outMax = Max;
  59   1      
  60   1         if(mpid->inAuto)
  61   1         {
  62   2           if(*(mpid->myOutput) > (mpid->outMax)) *(mpid->myOutput) = (mpid->outMax);
  63   2           else if(*(mpid->myOutput) < (mpid->outMin)) *(mpid->myOutput) = (mpid->outMin);
  64   2      
  65   2           if((mpid->outputSum) > mpid->outMax) (mpid->outputSum)= mpid->outMax;
  66   2           else if((mpid->outputSum) < mpid->outMin) mpid->outputSum= mpid->outMin;
  67   2         }
  68   1      }
  69          
  70          void PID_SetMode(PID_Class *mpid,bool Mode)
  71          {
  72   1          bool newAuto = (Mode == AUTOMATIC);
  73   1          if(newAuto && !(mpid->inAuto))
  74   1          {  
  75   2              PID_Initialize(mpid);
  76   2          }
  77   1          mpid->inAuto = newAuto;
  78   1      }
  79          void PID_Initialize(PID_Class *mpid)
  80          {
  81   1         mpid->outputSum = *(mpid->myOutput);
  82   1         mpid->lastInput = *(mpid->myInput);
  83   1         if(mpid->outputSum > mpid->outMax) mpid->outputSum = mpid->outMax;
  84   1         else if(mpid->outputSum < mpid->outMin) mpid->outputSum = mpid->outMin;
  85   1      }
  86          void PID_SetControllerDirection(PID_Class *mpid,bool Direction)
  87          {
  88   1         if(mpid->inAuto && Direction !=mpid->controllerDirection)
  89   1         {
  90   2            mpid->kp = (0 - mpid->kp);
  91   2            mpid->ki = (0 - mpid->ki);
  92   2            mpid->kd = (0 - mpid->kd);
  93   2         }
  94   1         mpid->controllerDirection = Direction;
  95   1      }
  96          
  97          bool PID_Compute(PID_Class *mpid)
  98          {
  99   1         PID_type output;
 100   1        Timetick now;
 101   1        Timetick timeChange;
 102   1         if(!(mpid->inAuto))
 103   1         {
 104   2           return false;
 105   2         }
 106   1         now = PIDmillis();
 107   1         timeChange = (now - mpid->lastTime);
 108   1         if(timeChange>=(mpid->SampleTime))
 109   1         {
 110   2            /*Compute all the working error variables*/
 111   2            PID_type input = *(mpid->myInput);
 112   2            PID_type error = *(mpid->mySetpoint) - input;
 113   2            PID_type dInput = (input - mpid->lastInput);
 114   2            mpid->outputSum+= (mpid->ki * error);
 115   2      
C51 COMPILER V9.54   PID                                                                   02/26/2018 14:59:50 PAGE 3   

 116   2            /*Add Proportional on Measurement, if P_ON_M is specified*/
 117   2            if(!(mpid->pOnE)) (mpid->outputSum)-= (mpid->kp) * dInput;
 118   2      
 119   2            if((mpid->outputSum) > (mpid->outMax)) (mpid->outputSum)= (mpid->outMax);
 120   2            else if((mpid->outputSum) < (mpid->outMin)) (mpid->outputSum)= (mpid->outMin);
 121   2      
 122   2            /*Add Proportional on Error, if P_ON_E is specified*/
 123   2            if(mpid->pOnE) output = mpid->kp * error;
 124   2            else output = 0;
 125   2      
 126   2            /*Compute Rest of PID Output*/
 127   2            output += mpid->outputSum - mpid->kd * dInput;
 128   2      
 129   2            if(output > mpid->outMax) output = mpid->outMax;
 130   2            else if(output < mpid->outMin) output = mpid->outMin;
 131   2            *(mpid->myOutput) = output;
 132   2      
 133   2            /*Remember some variables for next time*/
 134   2            mpid->lastInput = input;
 135   2            mpid->lastTime = now;
 136   2            return true;
 137   2         }
 138   1         else return false;
 139   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1977    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----     106
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
